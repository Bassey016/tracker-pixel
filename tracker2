import os
import uuid
import socket
import platform
from datetime import datetime
from flask import Flask, send_file, request
from PIL import Image
import threading
import tkinter as tk
from tkinter import messagebox

#Function to get LAN IP address
def get_lan_ip():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))  # Connect to a public DNS server
        ip = s.getsockname()[0] # Get the local IP address
    except Exception:
        ip = "127.0.0.1"
    finally:
        s.close()   
        return ip

# === CONFIG ===
STATIC_DIR = "static"
LOG_FILE = "access_log.txt"
PORT = 8000

# === INIT APP ===
app = Flask(__name__)
os.makedirs(STATIC_DIR, exist_ok=True)

# === FLASK LOGGER ===
@app.route("/track/<uid>.png")
def track(uid):
    log = f"[{datetime.now()}] UID: {uid}, IP: {request.remote_addr}, UA: {request.headers.get('User-Agent')}"
    print(log)
    with open(LOG_FILE, "a") as f:
        f.write(log + "\n")
    return send_file(f"{STATIC_DIR}/{uid}.png", mimetype="image/png")

def run_server():
    app.run(host="0.0.0.0", port=PORT)

# === GENERATE PIXEL ===
def generate_pixel():
    uid = str(uuid.uuid4())
    img_path = os.path.join(STATIC_DIR, f"{uid}.png")
    img = Image.new("RGBA", (1, 1), (0, 0, 0, 0))
    img.save(img_path)

    # Get the host IP address
    host_ip = socket.gethostbyname(socket.gethostname())
    print(f"[+] Pixel generated with UID: {uid}")
    print(f"[+] Embed URL: http://{host_ip}:{PORT}/track/{uid}.png")
    return uid

# === HOST INFO ===
def get_host_info():
    info = {
        "Hostname": socket.gethostname(),
        "IP Address": socket.gethostbyname(socket.gethostname()),
        "MAC Address": ':'.join(['{:02x}'.format((uuid.getnode() >> ele) & 0xff)
                                 for ele in range(0, 8*6, 8)][::-1]),
        "OS": platform.platform()
    }
    print("[+] Host Info:")
    for k, v in info.items():
        print(f"   {k}: {v}")
    return info

# === GUI ===
def launch_gui():
    def on_generate():
        uid = generate_pixel()
        msg = f"Tracking Pixel UID:\n{uid}\n\nURL:\nhttp://<your-ip>:{PORT}/track/{uid}.png"
        messagebox.showinfo("Pixel Generated", msg)

    def on_start_server():
        threading.Thread(target=run_server, daemon=True).start()
        messagebox.showinfo("Server", "Tracking server started on port 8000")

    def on_show_info():
        info = get_host_info()
        msg = "\n".join([f"{k}: {v}" for k, v in info.items()])
        messagebox.showinfo("Host Info", msg)

    root = tk.Tk()
    root.title("Tracking Pixel Logger")
    root.geometry("300x200")

    tk.Button(root, text="Generate Pixel", command=on_generate).pack(pady=10)
    tk.Button(root, text="Start Server", command=on_start_server).pack(pady=10)
    tk.Button(root, text="Show Host Info", command=on_show_info).pack(pady=10)

    root.mainloop()

# === CLI MENU ===
def cli_menu():
    while True:
        print("\n--- Tracking Pixel Logger ---")
        print("1. Generate tracking pixel")
        print("2. Start tracking server")
        print("3. Show host info")
        print("4. Launch GUI")
        print("5. Exit")
        choice = input("Select option: ").strip()
        if choice == "1":
            generate_pixel()
        elif choice == "2":
            run_server()
        elif choice == "3":
            get_host_info()
        elif choice == "4":
            launch_gui()
        elif choice == "5":
            break
        else:
            print("Invalid input.")

# === ENTRY POINT ===
if __name__ == "__main__":
    cli_menu()
import os
import uuid
import socket
import platform
from datetime import datetime
from flask import Flask, send_file, request
from PIL import Image
import threading
import tkinter as tk
from tkinter import messagebox

# === CONFIG ===
STATIC_DIR = "static"
LOG_FILE = "access_log.txt"
PORT = 8000

# === INIT APP ===
app = Flask(__name__)
os.makedirs(STATIC_DIR, exist_ok=True)

# === FLASK LOGGER ===
@app.route("/track/<uid>.png")
def track(uid):
    log = f"[{datetime.now()}] UID: {uid}, IP: {request.remote_addr}, UA: {request.headers.get('User-Agent')}"
    print(log)
    with open(LOG_FILE, "a") as f:
        f.write(log + "\n")
    return send_file(f"{STATIC_DIR}/{uid}.png", mimetype="image/png")

def run_server():
    app.run(host="0.0.0.0", port=PORT)

# === GENERATE PIXEL ===
def generate_pixel():
    uid = str(uuid.uuid4())
    img_path = os.path.join(STATIC_DIR, f"{uid}.png")
    img = Image.new("RGBA", (1, 1), (0, 0, 0, 0))
    img.save(img_path)
    # Get the host IP address
    host_ip = socket.gethostbyname(socket.gethostname())
    print(f"[+] Pixel generated with UID: {uid}")
    print(f"[+] Embed URL: http://{host_ip}:{PORT}/track/{uid}.png")
    return uid

# === HOST INFO ===
def get_host_info():
    info = {
        "Hostname": socket.gethostname(),
        "IP Address": socket.gethostbyname(socket.gethostname()),
        "MAC Address": ':'.join(['{:02x}'.format((uuid.getnode() >> ele) & 0xff)
                                 for ele in range(0, 8*6, 8)][::-1]),
        "OS": platform.platform()
    }
    print("[+] Host Info:")
    for k, v in info.items():
        print(f"   {k}: {v}")
    return info

# === GUI ===
def launch_gui():
    def on_generate():
        uid = generate_pixel()
        msg = f"Tracking Pixel UID:\n{uid}\n\nURL:\nhttp://<your-ip>:{PORT}/track/{uid}.png"
        messagebox.showinfo("Pixel Generated", msg)

    def on_start_server():
        threading.Thread(target=run_server, daemon=True).start()
        messagebox.showinfo("Server", "Tracking server started on port 8000")

    def on_show_info():
        info = get_host_info()
        msg = "\n".join([f"{k}: {v}" for k, v in info.items()])
        messagebox.showinfo("Host Info", msg)

    root = tk.Tk()
    root.title("Tracking Pixel Logger")
    root.geometry("300x200")

    tk.Button(root, text="Generate Pixel", command=on_generate).pack(pady=10)
    tk.Button(root, text="Start Server", command=on_start_server).pack(pady=10)
    tk.Button(root, text="Show Host Info", command=on_show_info).pack(pady=10)

    root.mainloop()

# === CLI MENU ===
def cli_menu():
    while True:
        print("\n--- Tracking Pixel Logger ---")
        print("1. Generate tracking pixel")
        print("2. Start tracking server")
        print("3. Show host info")
        print("4. Launch GUI")
        print("5. Exit")
        choice = input("Select option: ").strip()
        if choice == "1":
            generate_pixel()
        elif choice == "2":
            run_server()
        elif choice == "3":
            get_host_info()
        elif choice == "4":
            launch_gui()
        elif choice == "5":
            break
        else:
            print("Invalid input.")

# === ENTRY POINT ===
if __name__ == "__main__":
    cli_menu()
    # Remove duplicate code if present at the end of the file.